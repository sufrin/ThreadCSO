<project name="ScalaTasks">

    <!--
         This file is designed to be included in a build.xml

         It defines the standard scala ant tasks with a classpath
         that includes everything in the (now-unbundled) Scala library
         that's found at ${scala.local}/lib

         It also defines a macro task that makes a (locally)
         java-runnable jar file from class files in ${build.dir}.
    -->

    <property name="scala-library.jar" value="${scala.home}/lib/scala-library.jar"/>

    <!-- DEFAULT runtime classpath for jars includes the entire library -->
    <!-- This can be redefined in the build.xml file after scalatasks.xml has been included -->
    <path id="compile.classpath">
        <fileset dir="${local.jars}">
            <include name="**/*.jar"/>
            <exclude name="${build.dir}/**/*.jar"/>
        </fileset>
        <fileset dir="${scala.home}/lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- DEFAULT runtime classpath for makemain jars includes the entire library            -->
    <!-- This can be redefined in the build.xml file after scalatasks.xml has been included -->
    <!-- Or it can be replaced by specifying a classpathid parameter to makemain            -->
    <path id="runtime.classpath">
        <fileset dir="${local.jars}">
            <include name="**/*.jar"/>
            <exclude name="${build.dir}/**/*.jar"/>
        </fileset>
        <fileset dir="${scala.home}/lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!--
    <target name="scalatasks" unless="scalatasks.defined"
            description="Define Scala compilation tasks and classpaths">
        <property name="scalatasks.defined" value="true"/>
        <taskdef resource="scala/tools/ant/antlib.xml" classpathref="compile.classpath"/>
    </target>
    -->

    <macrodef name="makemain">
        <!--
           Make a runnable jar file @{name} from all the compiled files in
           ${build.dir} and with a class path that includes all the jar
           files in the fileset ${runtime.classpath} (or that named
           by the classpathid paramater.

           The name of the main class is @class}.

             Example:             <makemain name="test.jar" class="Test1"/>
             To run this example: java -jar Test

           THIS IS NOT A RELIABLE WAY OF BUILDING A CLOSED AND TRANSPORTABLE
           JAVA PROGRAM, FOR IT USES ABSOLUTE PATHS ON THE CURRENT HOST.
        -->
        <attribute name="name"/>                           <!-- Name of the program jar file -->
        <attribute name="class"/>                          <!-- Name of the main class -->
        <attribute name="classpathid"
                   default="${runtime.classpath}"/>        <!-- Id of the runtime classpath -->

        <sequential>
            <pathconvert property="jar.classpath" pathsep=" " refid="@{classpathid}"/>
            <echo message="JAR CLASSPATH: ${jar.classpath}"/>
            <jar destfile="${build.dir}/@{name}"
                 basedir="${build.dir}"
                 includes="**/*.class">
                <manifest>
                    <attribute name="Main-Class" value="@{class}"/>
                    <attribute name="Class-Path" value="${jar.classpath}"/>
                </manifest>
            </jar>
        </sequential>
    </macrodef>

</project>







